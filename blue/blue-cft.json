{
  "Resources": {
    "BlueInstanceSecurityGroup": {
      "Properties": {
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "6443",
            "ToPort": "6443",
            "CidrIp": "10.233.0.0/16",
            "Description": "Kubernetes services and pods for api server"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "6443",
            "ToPort": "6443",
            "CidrIp": {
              "Ref": "ExistingVPCCIDR"
            },
            "Description": "Worker connects to control node to join the cluster"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "30000",
            "ToPort": "32767",
            "CidrIp": "10.233.0.0/18",
            "Description": "kubenertes cluster ips and ports"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "10250",
            "ToPort": "10250",
            "CidrIp": {
              "Ref": "ExistingVPCCIDR"
            },
            "Description": "Kubelet supports control node HA"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8200",
            "ToPort": "8200",
            "CidrIp": {
              "Ref": "ExistingVPCCIDR"
            },
            "Description": "worker connects to vault on control node to create cert"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "AllowedLocation"
            },
            "Description": "Beta customer defined Source location to perform SSH"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": {
              "Ref": "AllowedLocation"
            },
            "Description": "Beta customer defined Source location to access ui"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "44134",
            "ToPort": "44134",
            "CidrIp": "10.233.64.0/18",
            "Description": "Tiller Server"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "7762",
            "ToPort": "7772",
            "CidrIp": "10.233.64.0/18",
            "Description": "Metrics forwarding from Prometheus"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "50051",
            "ToPort": "50051",
            "CidrIp": "10.233.64.0/18",
            "Description": "Metrics forwarding from Prometheus"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "7775",
            "ToPort": "7776",
            "CidrIp": "10.233.64.0/18",
            "Description": "k8s-mon-svc access"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "9090",
            "ToPort": "9100",
            "CidrIp": "10.233.64.0/18",
            "Description": "cAdvison metrics scraping and Node exporter"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "9200",
            "ToPort": "9300",
            "CidrIp": "10.233.64.0/18",
            "Description": "Elasticsearch access and transport"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "5601",
            "ToPort": "5601",
            "CidrIp": "10.233.64.0/18",
            "Description": "Kibana access"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "50051",
            "ToPort": "50443",
            "CidrIp": "10.233.64.0/18",
            "Description": "Event Collector"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "5555",
            "ToPort": "5555",
            "CidrIp": "10.233.64.0/18",
            "Description": "Event Collector"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "14267",
            "ToPort": "16686",
            "CidrIp": "10.233.64.0/18",
            "Description": "Event Collector"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "SG"
                ]
              ]
            }
          }
        ],
        "GroupDescription": "Enables SSH access to instance.",
        "VpcId": {
          "Ref": "ExistingVPCId"
        }
      },
      "Type": "AWS::EC2::SecurityGroup",
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "b99fbc1c-86fb-4da7-b930-79578e19ef24"
        }
      }
    },
    "BlueInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "control"
                ]
              ]
            }
          },
          {
            "Key": "KubernetesCluster",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            }
          }
        ],
        "KeyName": {
          "Ref": "ExistingKeyPairName"
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegion2AMI",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        },
        "SecurityGroupIds": [
          {
            "Ref": "BlueInstanceSecurityGroup"
          }
        ],
        "SubnetId": {
          "Ref": "ExistingSubnetId"
        },
        "IamInstanceProfile": {
          "Ref": "BlueInstanceIAMProfile"
        },
        "SourceDestCheck": false,
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "enableUserPass=",
                {
                  "Ref": "EnabledUserPass"
                },
                "\n",
                "blueprefix=",
                {
                  "Ref": "AWS::StackName"
                },
                "\n",
                "enableList=k8s-portal-svc\n",
                "/etc/blue/init/host-boot/host-config/host-config.sh -e BLUE_CLUSTER_PREFIX=${blueprefix} -e BLUE_ENABLE_USERPASS=${enableUserPass} -e BLUE_ENABLE_CAPABILITY_LIST=${enableList}\n",
                "export BLUE_ENABLE_CAPABILITY_LIST=k8s-traffic-path-svc\n",
                "/etc/blue/init/host-boot/host-config/tasks/60-blue-services/scripts/enable-blue-capabilities.sh\n"
              ]
            ]
          }
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "dca758bd-8692-48e6-b3e1-098353a392ac"
        }
      }
    },
    "BlueInstanceIAMProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [
          {
            "Fn::If": [
              "ExistingIAMRoleEmpty",
              {
                "Ref": "BlueInstanceIAMRole"
              },
              {
                "Ref": "ExistingIAMRole"
              }
            ]
          }
        ]
      }
    },
    "BlueInstanceIAMPolicy": {
      "Type": "AWS::IAM::Policy",
      "Condition": "ExistingIAMRoleEmpty",
      "Properties": {
        "PolicyName": "BlueInstanceIAMPolicy",
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ec2:*Vpc*",
                "ec2:*Instance*",
                "ec2:*Route*",
                "ec2:*InternetGateway*",
                "ec2:*SecurityGroup*",
                "ec2:*Subnet*",
                "ec2:*KeyPair*",
                "ec2:*NetworkInterface*",
                "ec2:*Tags*",
                "ec2:Describe*",
                "ec2:*Address*",
                "ec2:*PrivateIp*",
                "ec2:*Volume*",
                "ec2:AuthorizeSecurityGroupIngress",
                "elasticloadbalancing:*",
                "iam:*Role*",
                "iam:*Policy*",
                "iam:*Profile*"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }
          ]
        },
        "Roles": [
          {
            "Ref": "BlueInstanceIAMRole"
          }
        ]
      }
    },
    "BlueInstanceIAMRole": {
      "Type": "AWS::IAM::Role",
      "Condition": "ExistingIAMRoleEmpty",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        }
      }
    }
  },
  "AWSTemplateFormatVersion": "2010-09-09",
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Amazon EC2 Configuration"
          },
          "Parameters": [
            "ExistingVPCId",
            "ExistingVPCCIDR",
            "ExistingSubnetId",
            "ExistingKeyPairName",
            "AllowedLocation",
            "InstanceType",
            "ExistingIAMRole"
          ]
        }
      ],
      "ParameterLabels": {
        "VPCID": {
          "default": "Which VPC should this be deployed to?"
        }
      }
    },
    "AWS::CloudFormation::Designer": {
      "dca758bd-8692-48e6-b3e1-098353a392ac": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 320,
          "y": 20
        },
        "z": 0,
        "embeds": [],
        "isassociatedwith": [
          "b99fbc1c-86fb-4da7-b930-79578e19ef24"
        ]
      },
      "b99fbc1c-86fb-4da7-b930-79578e19ef24": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 80,
          "y": 10
        },
        "z": 0,
        "embeds": []
      }
    }
  },
  "Conditions": {
    "ExistingIAMRoleEmpty": {
      "Fn::Equals": [
        {
          "Ref": "ExistingIAMRole"
        },
        ""
      ]
    },
    "IsEnabledUserPass": {
      "Fn::Equals": [
        {
          "Ref": "EnabledUserPass"
        },
        "true"
      ]
    },
    "IsDisabledUserPass": {
      "Fn::Not": [
        {
          "Condition": "IsEnabledUserPass"
        }
      ]
    }
  },
  "Parameters": {
    "ExistingVPCId": {
      "Type": "AWS::EC2::VPC::Id",
      "Description": "Existing VPC Id to where Blue cluster will be deployed to."
    },
    "ExistingVPCCIDR": {
      "Type": "String",
      "Default": "10.0.0.0/16",
      "Description": "Existing VPC IP CIDR range.",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "InstanceType": {
      "Type": "String",
      "Default": "t2.medium",
      "AllowedValues": [
        "t2.medium",
        "t2.large",
        "t2.xlarge",
        "t2.2xlarge"
      ],
      "Description": "Select your choice of instance type. Default is t2.medium."
    },
    "ExistingSubnetId": {
      "Type": "AWS::EC2::Subnet::Id",
      "Description": "Existing Subnet Id to where Blue cluster will be deployed to."
    },
    "ExistingKeyPairName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },
    "AllowedLocation": {
      "Description": " The IP address range that can be used to access portal service.",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "EnabledUserPass": {
      "Type": "String",
      "Default": "false",
      "AllowedValues": [
        "true",
        "false"
      ],
      "Description": "Select true to opt-in using username and password authentication for Blue cluster. Default is false."
    },
    "ExistingIAMRole": {
      "Type": "String",
      "Description": "Optional Parameter existing IAM Role Name"
    }
  },
  "Mappings": {
    "AWSRegion2AMI": {
      "us-west-2": {
        "AMI": "ami-024f4721dfe6409b3"
      },
      "us-west-1": {
        "AMI": "ami-06320139f26357552"
      },
      "eu-central-1": {
        "AMI": "ami-07614c592968cc667"
      },
      "eu-west-1": {
        "AMI": "ami-0c8d9334ea9195b0f"
      },
      "eu-west-2": {
        "AMI": "ami-026045b4dc91c3bf8"
      },
      "ap-southeast-1": {
        "AMI": "ami-0cada8ce755913e02"
      }
    }
  },
  "Outputs": {
    "PortalServiceURL": {
      "Condition": "IsEnabledUserPass",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Fn::GetAtt": [
                "BlueInstance",
                "PublicDnsName"
              ]
            },
            "/ui"
          ]
        ]
      },
      "Description": "Portal service URL"
    },
    "Username": {
      "Condition": "IsEnabledUserPass",
      "Value": {
        "Fn::Join": [
          "",
          [
            "admin"
          ]
        ]
      },
      "Description": "Admin user"
    },
    "Password": {
      "Condition": "IsEnabledUserPass",
      "Value": {
        "Ref": "BlueInstance"
      },
      "Description": "Initial password to login to the portal service. You will need to update the password upon login."
    },
    "PublicDNS": {
      "Condition": "IsDisabledUserPass",
      "Value": {
        "Fn::GetAtt": [
          "BlueInstance",
          "PublicDnsName"
        ]
      },
      "Description": "Public DNS name of Blue master"
    }
  },
  "Description": "0.2.0-m.alpha1.927468 was created on 2018-09-06-20.01.17 by root"
}
